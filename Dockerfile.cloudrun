# OrKa Cloud Run Dockerfile - OpenAI-Only Architecture
# Ubuntu 22.04 + Python 3.11 + Redis + OrKa
# Optimized for Google Cloud Run with OpenAI agents (no local LLM)
# Requires only 4GB RAM, 2 vCPU - much cheaper and faster than local LLM

FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3-pip \
    python3.11-venv \
    redis-server \
    curl \
    wget \
    git \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Make python3.11 the default python3
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 \
    && update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Install pip for Python 3.11
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11

# Copy project files
COPY . /app/

# Install OrKa with all dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir ".[all]" && \
    pip install --no-cache-dir slowapi

# Create necessary directories
RUN mkdir -p /logs

# Copy startup script
COPY startup.sh /app/startup.sh
RUN chmod +x /app/startup.sh

# Configure Redis for Cloud Run (no persistence, memory only)
RUN mkdir -p /var/run/redis && \
    echo "bind 127.0.0.1" > /etc/redis/redis.conf && \
    echo "port 6380" >> /etc/redis/redis.conf && \
    echo "daemonize no" >> /etc/redis/redis.conf && \
    echo "maxmemory 2gb" >> /etc/redis/redis.conf && \
    echo "maxmemory-policy allkeys-lru" >> /etc/redis/redis.conf && \
    echo "save \"\"" >> /etc/redis/redis.conf

# Environment variables for OrKa (OpenAI-only)
ENV ORKA_MEMORY_BACKEND=redisstack
ENV REDIS_URL=redis://localhost:6380/0
ENV ORKA_PORT=8000
ENV ORKA_LOG_DIR=/logs
ENV ORKA_LOG_RETENTION_HOURS=24
ENV RATE_LIMIT_PER_MINUTE=5
# Note: OPENAI_API_KEY is provided by user in request body

# Expose ports
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Start all services via startup script
CMD ["/app/startup.sh"]

